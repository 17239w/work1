// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: test.sql

package db

import (
	"context"
)

const createTest = `-- name: CreateTest :one
INSERT INTO tests(
    devices_id,
    test_name,
    gear,
    percentage,
    lower_limit,
    upper_limit,
    test_data
) VALUES(
    $1,$2,$3,$4,$5,$6,$7
)RETURNING id, test_name, devices_id, created_at, gear, percentage, lower_limit, upper_limit, test_data
`

type CreateTestParams struct {
	DevicesID  int64  `json:"devices_id"`
	TestName   string `json:"test_name"`
	Gear       int64  `json:"gear"`
	Percentage int64  `json:"percentage"`
	LowerLimit int64  `json:"lower_limit"`
	UpperLimit int64  `json:"upper_limit"`
	TestData   int64  `json:"test_data"`
}

func (q *Queries) CreateTest(ctx context.Context, arg CreateTestParams) (Test, error) {
	row := q.db.QueryRowContext(ctx, createTest,
		arg.DevicesID,
		arg.TestName,
		arg.Gear,
		arg.Percentage,
		arg.LowerLimit,
		arg.UpperLimit,
		arg.TestData,
	)
	var i Test
	err := row.Scan(
		&i.ID,
		&i.TestName,
		&i.DevicesID,
		&i.CreatedAt,
		&i.Gear,
		&i.Percentage,
		&i.LowerLimit,
		&i.UpperLimit,
		&i.TestData,
	)
	return i, err
}

const listTests = `-- name: ListTests :many
SELECT id, test_name, devices_id, created_at, gear, percentage, lower_limit, upper_limit, test_data FROM tests
WHERE devices_id =$1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTestsParams struct {
	DevicesID int64 `json:"devices_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListTests(ctx context.Context, arg ListTestsParams) ([]Test, error) {
	rows, err := q.db.QueryContext(ctx, listTests, arg.DevicesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Test{}
	for rows.Next() {
		var i Test
		if err := rows.Scan(
			&i.ID,
			&i.TestName,
			&i.DevicesID,
			&i.CreatedAt,
			&i.Gear,
			&i.Percentage,
			&i.LowerLimit,
			&i.UpperLimit,
			&i.TestData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

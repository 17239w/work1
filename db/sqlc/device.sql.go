// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: device.sql

package db

import (
	"context"
	"time"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices(
    device_name,
    device_manufacturer,
    device_origin,
    production_date,
    device_model
)VALUES(
    $1,$2,$3,$4,$5
) RETURNING id, device_name, device_manufacturer, device_origin, production_date, testing_date, device_model
`

type CreateDeviceParams struct {
	DeviceName         string    `json:"device_name"`
	DeviceManufacturer string    `json:"device_manufacturer"`
	DeviceOrigin       string    `json:"device_origin"`
	ProductionDate     time.Time `json:"production_date"`
	DeviceModel        string    `json:"device_model"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, createDevice,
		arg.DeviceName,
		arg.DeviceManufacturer,
		arg.DeviceOrigin,
		arg.ProductionDate,
		arg.DeviceModel,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.DeviceManufacturer,
		&i.DeviceOrigin,
		&i.ProductionDate,
		&i.TestingDate,
		&i.DeviceModel,
	)
	return i, err
}

const listDevices = `-- name: ListDevices :one
SELECT id, device_name, device_manufacturer, device_origin, production_date, testing_date, device_model FROM devices
WHERE id=$1 LIMIT 1
`

func (q *Queries) ListDevices(ctx context.Context, id int64) (Device, error) {
	row := q.db.QueryRowContext(ctx, listDevices, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.DeviceName,
		&i.DeviceManufacturer,
		&i.DeviceOrigin,
		&i.ProductionDate,
		&i.TestingDate,
		&i.DeviceModel,
	)
	return i, err
}
